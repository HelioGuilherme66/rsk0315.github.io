var searchIndex = JSON.parse('{\
"nekolib":{"doc":"ねこちゃんライブラリ。","t":[0,0,0,14,14,0,0,0,0,0,5,5,5,0,5,0,5,5,0,5,0,0,5,5,5,0,5,5,0,5,0,0,5,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,3,3,3,3,3,3,3,3,3,3,3,3,11,0,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,0,0,0,3,11,11,11,11,3,11,11,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,11,3,11,3,11,11,11,11,11,11,11,11,3,11,11,3,3,11,11,11,3,11,11,11,3,11,11,11,5,0,5,0,5,0,5,5,5,8,3,3,3,3,8,8,8,8,8,8,8,3,3,8,8,3,8,3,8,8,8,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,11,11,10,0,11,11,11,0,10,0,10,11,11,11,11,0,10,0,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,10,0,10,0,0,11,11,11,11,11,11,11,11,11,11,11,0,10,0,10,0,0,10,0,10,0,10,0,10,0,11,11,11,11,11,11,11,11,11,5,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,8,10,3,11,11,11,3,3,11,11,11,11,11,11,5,3,11,11,11,8,10,11,8,10,8,10,8,10,8,10,10,8,10,8,10,3,11,11,11,3,11,11,11,8,10,8,10,3,11,11,11,11,11,11,11,11,11,11,8,10,8,10,8,10,8,10,3,11,3,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,0,3,3,11,11,11,11,11,11,11,11,11,11,3,11,11,11,3,3,11,11,11,11,11,11,11,11,11,11,8,16,8,8,16,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,16,8,16,16,16,16,16,8,8,8,8,8,8,8,8,16,8,16,16,16,16,16,16,16,16,16,8,8,8,8,8,8,8,8,8,8,16,8,16,16,8,8,8,8,8,8,8,8,8,0,10,10,0,11,0,0,0,0,10,10,10,10,0,0,10,11,10,10,0,10,0,10,0,10,10,10,10,0,10,10,10,11,11,10,11,0,10,0,10,11,10,0,11,10,10,10,11,10,10,10,10,10,10,10,10,10,0,0,10,0,11,11,10,10,10,0,10,10,10,10,0,11,10,10,11,8,16,10,8,16,16,10,8,8,8,10,8,10,16,8,8,8,8,8,8,8,8,8,8,8,16,8,8,8,8,16,16,11,10,11,11,11,10,10,11,11,11,8,8,3,11,11,11,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,8,10,11,11,10,10,10,11,10,8,8,8,16,16,8,8,8,10,10,10,10,10,11,11,10,10,10,10,8,10,8,16,10,8,8,10,10,8,16,10,8,10,8,10,8,8,8,8,16,10,10,16,16,16,16,16,16,8,8,8,8,8,8,10,10,10,10,10,10,16,8,10,8,8,8,8,8,8,8,16,8,10,16,8,10,10,10,10,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,5,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,3,3,3,3,3,11,16,8,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11],"n":["algo","ds","graph","impl_assoc_val","impl_mod_int","math","seq","traits","utils","bisect","bisect","bisect_slice","convolve","extremum","extremum","extremum_float","extremum_float","extremum_slice","karatsuba","majority","majority_","minmax","minmax","minmax_by","minmax_by_key","mo","mo","next_permutation","parallel_bisect","parallel_bisect","permutation","tortoise_hare","tortoise_hare","window_bisect","window_bisect","bisect","bisect_slice","extremum","extremum_slice","extremum_float","convolve","majority","minmax","minmax_by","minmax_by_key","mo","parallel_bisect","next_permutation","tortoise_hare","window_bisect","BicrementalMedian","BicrementalMedianDev","BitSet","DisjointSparseTable","FoldableDeque","FoldableQueue","IntervalSet","RsDict","UnionFind","VecActSegtree","VecSegtree","WaveletMatrix","act","bicremental_median","bicremental_median_dev","bit_set","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","count","count","count","count_3way","default","default","disjoint_sparse_table","eq","eq","eq","eq","extend","find_nth","find_nth","fmt","fmt","fmt","fmt","fmt","fmt","fold","fold","fold","fold","fold","fold_bisect","fold_bisect","fold_bisect_rev","fold_bisect_rev","foldable_deque","foldable_queue","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","get_mut","index","index","interval_set","into","into","into","into","into","into","into","into","into","into","into","into","len","ne","ne","ne","ne","new","pop","pop_back","pop_front","pop_front","push","push_back","push_back","push_front","quantile","repr","rs_dict","set_value","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","union_find","unite","vec_act_segtree","vec_segtree","wavelet_matrix","BicrementalMedian","insert","median","new","remove","BicrementalMedianDev","insert","median","median_dev","new","remove","BitSet","Iter","borrow","borrow_mut","contains","from","insert","into","into_iter","iter","new","new","next","remove","try_from","try_into","type_id","DisjointSparseTable","FoldableDeque","new","FoldableQueue","new","IntervalSet","clear","covering","has_range","insert","is_empty","mex","new","remove","RsDict","rank","select","UnionFind","VecActSegtree","is_empty","len","new","VecSegtree","is_empty","len","new","WaveletMatrix","rank","select","xored_quantile","dijkstra","dijkstra_","dinic","dinic_","scc","scc_","dijkstra","dinic","scc","CarmichaelLambda","CompactSieve","ConstDiv","ConstDiv2","Crt","DLog","DigitSum","Divisors","EulerPhi","Factors","Gcd","GcdRecip","HarmonicFloorSum","IncrementalLineSet","Lcm","LinearFloorSum","LinearSieve","ModAckermann","ModInt","ModOrd","ModPow","ModTetration","SieveSquarePlusOne","SlopeFunction","TwoSat","add","add_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","carmichael_lambda","carmichael_lambda","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","compact_sieve","const_div","count_prime","crt","default","default","digit_pow_sum","digit_sum","digit_sum","div","div_assign","divisors","divisors","dlog","dlog","eq","eq","eq","eq","euler_phi","euler_phi","factors","factors","factors_dup","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","gcd","gcd","gcd_recip","gcd_recip","harmonic_floor_sum","incremental_line_set","into","into","into","into","into","into","into","into","into","into","into","lcm","lcm","linear_floor_sum","linear_floor_sum","linear_sieve","mod_ackermann","mod_ackermann","mod_ord","mod_ord","mod_pow","mod_pow","mod_tetration","mod_tetration","modint","mul","mul_assign","mul_recip","ne","ne","ne","ne","neg","one","prime_pi","sieve_square_plus_one","slope_function","sub","sub_assign","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","two_sat","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","zero","CarmichaelLambda","carmichael_lambda","CompactSieve","is_prime","new","primes","ConstDiv","ConstDiv2","new","new","quot","quot","rem","rem","prime_pi","Crt","equiv_mod","new","solve","DigitSum","digit_pow_sum","digit_sum","Divisors","divisors","DLog","dlog","EulerPhi","euler_phi","Factors","factors","factors_dup","Gcd","gcd","GcdRecip","gcd_recip","HarmonicFloorSum","new","quot","rem","IncrementalLineSet","add_line","min_at_point","new","Lcm","lcm","LinearFloorSum","linear_floor_sum","LinearSieve","divisors","divisors_count","euler_phi","euler_phi_star","factors","factors_dup","is_prime","least_factor","new","primes","ModAckermann","mod_ackermann","ModOrd","mod_ord","ModPow","mod_pow","ModTetration","mod_tetration","ModInt","get","SieveSquarePlusOne","factors","factors_dup","is_prime","new","SlopeFunction","add_abs","add_const","add_left","add_right","argmin","min","min_left","min_right","new","shift","window","TwoSat","add_clause","new","witness","KmpSearcher","SuffixArray","ZSearcher","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","fmt","fmt","fmt","from","from","from","from","from","from","from","into","into","into","kmp","ne","ne","ne","pop_back","push_back","suffix_array","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","z_algo","KmpSearcher","Occurrences","borrow","borrow_mut","from","into","into_iter","next","occurrences","try_from","try_into","type_id","SuffixArray","into_inner","search","search_str","Occurrences","ZSearcher","borrow","borrow_mut","from","into","into_iter","next","occurrences","try_from","try_into","type_id","Act","Action","AddAssoc","AddComm","Additive","AssocVal","Associative","Commutative","CommutativeGroup","CommutativeMonoid","CommutativeRing","Count","Count3way","DisjointSet","Distributive","ElasticSlice","EndBounded","EndExclusive","EndInclusive","EndUnbounded","ExpandBack","ExpandFront","Field","FindNth","Fold","FoldBisect","FoldBisectRev","GetMut","Group","Hashed","Identity","Input","Input","Input","Input","Input","Magma","Max","Min","Monoid","MonoidAction","MulAssoc","MulComm","MulRecip","Multiplicative","One","Operand","Operator","Output","Output","Output","Output","Output","Output","Output","PartialRecip","Pop","PopBack","PopFront","Push","PushBack","PushFront","Quantile","Recip","Ring","Salt","Semigroup","Set","Set","SetValue","ShrinkBack","ShrinkFront","SliceHash","StartBounded","StartInclusive","StartUnbounded","StatefulPred","Zero","act","act","act","action","add","additive","assoc_val","binop","count","count","count","count","count_3way","disjoint_set","elastic_slice","end","equiv","expand_back","expand_front","find_nth","find_nth","fold","fold","fold_bisect","fold_bisect","fold_bisect_rev","full_len","get","get_mut","get_mut","hash","id","is_empty","is_empty","len","len","max","max","min","min","mul","mul_recip","multiplicative","neg","new","next","one","one","op","partial_recip","pop","pop_back","pop_front","pred","push","push_back","push_front","push_pop","quantile","quantile","range_bounds","recip","recip","repr","reset","reset","set_value","set_value","shrink_back","shrink_front","start","stateful_predicate","subset","unite","zero","zero","Act","Action","act","MonoidAction","Operand","Operator","act","AddAssoc","AddComm","Zero","zero","AssocVal","get","Additive","Associative","Commutative","CommutativeGroup","CommutativeMonoid","CommutativeRing","Distributive","Field","Group","Identity","Magma","Monoid","Multiplicative","PartialRecip","Recip","Ring","Semigroup","Set","Set","add","id","mul","neg","one","op","partial_recip","recip","recip","zero","Count","Count3way","Count3wayResult","borrow","borrow_mut","clone","clone_into","count","count_3way","eq","eq","fmt","from","ge","gt","into","le","lt","ne","ne","new","to_owned","try_from","try_into","type_id","DisjointSet","count","equiv","is_empty","len","new","repr","subset","unite","ElasticSlice","ExpandBack","ExpandFront","Hashed","Salt","ShrinkBack","ShrinkFront","SliceHash","end","expand_back","expand_front","full_len","hash","is_empty","len","reset","shrink_back","shrink_front","start","FindNth","find_nth","Fold","Output","fold","FoldBisect","FoldBisectRev","fold_bisect","fold_bisect_rev","GetMut","Output","get_mut","Max","max","Min","min","MulAssoc","MulComm","MulRecip","One","Output","mul_recip","one","Input","Input","Input","Output","Output","Output","Pop","PopBack","PopFront","Push","PushBack","PushFront","pop","pop_back","pop_front","push","push_back","push_front","Output","Quantile","quantile","EndBounded","EndExclusive","EndInclusive","EndUnbounded","StartBounded","StartInclusive","StartUnbounded","Input","SetValue","set_value","Input","StatefulPred","count","next","pred","reset","OpAdd","OpMax","OpMin","OpMul","OpRollHash","Scanner","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds_within","buf_range","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","id","id","id","id","id","into","into","into","into","into","into","ne","ne","ne","ne","ne","op","op","op","op","op","op_add","op_max","op_min","op_mul","op_roll_hash","partial_recip","partial_recip","recip","scanner","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","bounds_within","OpAdd","OpMax","OpMin","OpMul","OpRollHash","val_from","Err","Scan","ScanTupleError","Scanner","borrow","borrow_mut","eq","fmt","fmt","from","from_stdin","get_line","get_while","ignore","ignore_while","into","next","next_m1","next_n","scan","to_string","try_from","try_into","type_id"],"q":["nekolib","","","","","","","","","nekolib::algo","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::algo::bisect","","nekolib::algo::extremum","","nekolib::algo::extremum_float","nekolib::algo::karatsuba","nekolib::algo::majority_","nekolib::algo::minmax","","","nekolib::algo::mo","nekolib::algo::parallel_bisect","nekolib::algo::permutation","nekolib::algo::tortoise_hare","nekolib::algo::window_bisect","nekolib::dsnekolib::ds::bicremental_median","","","","","nekolib::ds::bicremental_median_dev","","","","","","nekolib::ds::bit_set","","","","","","","","","","","","","","","","","nekolib::ds::disjoint_sparse_table","nekolib::ds::foldable_deque","","nekolib::ds::foldable_queue","","nekolib::ds::interval_set","","","","","","","","","nekolib::ds::rs_dict","","","nekolib::ds::union_find","nekolib::ds::vec_act_segtree","","","","nekolib::ds::vec_segtree","","","","nekolib::ds::wavelet_matrix","","","","nekolib::graph","","","","","","nekolib::graph::dijkstra_","nekolib::graph::dinic_","nekolib::graph::scc_","nekolib::mathnekolib::math::carmichael_lambda","","nekolib::math::compact_sieve","","","","nekolib::math::const_div","","","","","","","","nekolib::math::count_prime","nekolib::math::crt","","","","nekolib::math::digit_sum","","","nekolib::math::divisors","","nekolib::math::dlog","","nekolib::math::euler_phi","","nekolib::math::factors","","","nekolib::math::gcd","","nekolib::math::gcd_recip","","nekolib::math::harmonic_floor_sum","","","","nekolib::math::incremental_line_set","","","","nekolib::math::lcm","","nekolib::math::linear_floor_sum","","nekolib::math::linear_sieve","","","","","","","","","","","nekolib::math::mod_ackermann","","nekolib::math::mod_ord","","nekolib::math::mod_pow","","nekolib::math::mod_tetration","","nekolib::math::modint","","nekolib::math::sieve_square_plus_one","","","","","nekolib::math::slope_function","","","","","","","","","","","","nekolib::math::two_sat","","","","nekolib::seq","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::seq::kmp","","","","","","","","","","","","nekolib::seq::suffix_array","","","","nekolib::seq::z_algo","","","","","","","","","","","","nekolib::traits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::traits::act","","","nekolib::traits::action","","","","nekolib::traits::additive","","","","nekolib::traits::assoc_val","","nekolib::traits::binop","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::traits::count","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::traits::disjoint_set","","","","","","","","","nekolib::traits::elastic_slice","","","","","","","","","","","","","","","","","","","nekolib::traits::find_nth","","nekolib::traits::fold","","","nekolib::traits::fold_bisect","","","","nekolib::traits::get_mut","","","nekolib::traits::max","","nekolib::traits::min","","nekolib::traits::multiplicative","","","","","","","nekolib::traits::push_pop","","","","","","","","","","","","","","","","","","nekolib::traits::quantile","","","nekolib::traits::range_bounds","","","","","","","nekolib::traits::set_value","","","nekolib::traits::stateful_predicate","","","","","","nekolib::utils","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","nekolib::utils::buf_range","nekolib::utils::op_add","nekolib::utils::op_max","nekolib::utils::op_min","nekolib::utils::op_mul","nekolib::utils::op_roll_hash","","nekolib::utils::scanner","","","","","","","","","","","","","","","","","","","","","","",""],"d":["アルゴリズムたち。","データ構造たち。","グラフに関するものたち。","","","数学関連のアルゴリズムたち。","文字列アルゴリズムたち。","トレイトたち。","便利ちゃんたち。","二分探索。","二分探索で境界を探す。","二分探索で境界を探す。","Karatsuba 法。Карацуба 法？","三分探索。","三分探索で極値を探す。","三分探索（実数）。","三分探索で極値を探す。","三分探索で極値を探す。","Karatsuba 法。","Boyer–Moore’s majority vote algorithm。","Boyer–Moore’s majority vote algorithm。","スライスの最小値・最大値を求める。","スライスの最小値および最大値を求める。","比較関数 <code>compare</code> …","キー <code>key</code> …","Mo’s algorithm。","Mo’s algorithm。","辞書順で次の順列の生成。","並列二分探索。","並列二分探索を行う。","順列。","周期検出。","周期検出を行う。","尺取り法。","尺取り法で、各始端に対して境界を探す。","二分探索で境界を探す。","二分探索で境界を探す。","三分探索で極値を探す。","三分探索で極値を探す。","三分探索で極値を探す。","Karatsuba 法。Карацуба 法？","Boyer–Moore’s majority vote algorithm。","スライスの最小値および最大値を求める。","比較関数 <code>compare</code> …","キー <code>key</code> …","Mo’s algorithm。","並列二分探索を行う。","辞書順で次の順列の生成。","周期検出を行う。","尺取り法で、各始端に対して境界を探す。","中央値の管理。","中央値と偏差の管理。","bit set。","disjoint sparse table。","fold 可能両端キュー。","fold 可能キュー。","区間の集合。","rank/select 辞書。","union-find。","","<code>Vec</code> ベースのセグ木。","wavelet matrix。","","中央値の管理。","中央値と偏差の管理。","bit set。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","disjoint sparse table。","","","","","","","","","","","","","","","","","","","","","","","fold 可能両端キュー。","fold 可能キュー。","","","","","","","","","","","","","","","","","","","","","区間の集合。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","rank/select 辞書。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","union-find。","","<code>Vec</code> ベースの区間作用セグ木。","<code>Vec</code> ベースのセグ木。","wavelet matrix。","中央値の管理。","","","","","中央値と偏差の管理。","","","","","","bit set。","","","","$i$ を含むとき真を返す。","","$i$ を追加する。","","","","","初期化。","","$i$ を削除する。","","","","disjoint sparse table。","fold 可能両端キュー。","","fold 可能キュー。","","区間の集合。","空集合に戻す。","区間 <code>r</code> を含む区間の両端を返す。","区間 <code>r</code> を含んでいれば <code>true</code> を返す。","区間 <code>r</code> を追加する。","集合が空であれば <code>true</code> を返す。","<code>x</code> …","空集合で初期化する。","区間 <code>r</code> を削除する。","rank/select 辞書。","","","union-find。","","","","","<code>Vec</code> ベースのセグ木。","","","","wavelet matrix。","","","","Dijkstra 法に基づく最短距離。","最短距離 (Dijkstra)。","Dinic 法に基づく最大流。","最大流 (Dinic)。","lowlink に基づく強連結成分分解。","強連結成分分解。","Dijkstra 法に基づく最短距離。","Dinic 法に基づく最大流。","lowlink に基づく強連結成分分解。","Carmichael の $\\\\lambda$ 関数。","篩。","定数除算。","定数除算。","Chinese remaindering。","離散対数。","桁和。","約数列挙。","Euler の $\\\\varphi$ 関数。","素因数分解。","最大公約数。","最大公約数と逆元。","$\\\\sum_{i=1}^n \\\\lfloor m/i\\\\rfloor$ および $\\\\sum_{i=1}^n …","直線の集合。","最小公倍数。","$ \\\\sum_{i=0}^{n-1} \\\\left\\\\lfloor\\\\frac{ai+b}{m}\\\\right…","線形篩。","Ackermann 関数。","","位数。","冪乗。","tetration。","$n^2+1$ 型素数の篩。","区分線形凸関数。","2-SAT。","","","","","","","","","","","","","","","","","","","","","","","","","Carmichael の $\\\\lambda$ 関数。","","","","","","","","","","","","","","","","","","篩。","定数除算。","素数の数え上げ。","Chinese remaindering。","","","","桁和。","","","","約数列挙。","","離散対数。","","","","","","Euler の $\\\\varphi$ 関数。","","素因数分解。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","最大公約数。","","最大公約数と逆元。","","$\\\\sum_{i=1}^n \\\\lfloor m/i\\\\rfloor$ および $\\\\sum_{i=1}^n …","直線の集合。","","","","","","","","","","","","最小公倍数。","","$ \\\\sum_{i=0}^{n-1} \\\\left\\\\lfloor\\\\frac{ai+b}{m}\\\\right…","","線形篩。","Ackermann 関数。","","位数。","","冪乗。","","tetration。","","法 $m$ での演算をする。","","","","","","","","","","素数の数え上げ。","$n^2+1$ 型素数の篩。","区分線形凸関数。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","2-SAT。","","","","","","","","","","","","","Carmichael の $\\\\lambda$ 関数。","","篩。","","","","定数除算。","定数除算。","","","","","","","素数の数え上げ。","Chinese remaindering。","条件 $x\\\\equiv r\\\\pmod{m}$ を追加する。","$x\\\\equiv 0\\\\pmod{1}$ で初期化する。","$x\\\\equiv r_i\\\\mod{m_i}$ なる $0\\\\le x\\\\lt \\\\lcm_i m_i$ …","桁和。","","","約数列挙。","","離散対数。","","Euler の $\\\\varphi$ 関数。","","素因数分解。","","","最大公約数。","","最大公約数と逆元。","","$\\\\sum_{i=1}^n \\\\lfloor m/i\\\\rfloor$ および $\\\\sum_{i=1}^n …","前処理を行う。","$\\\\sum_{i=s}^e \\\\lfloor m/i\\\\rfloor$ を返す。","$\\\\sum_{i=s}^e (m\\\\bmod i)$ を返す。","直線の集合。","$S \\\\xleftarrow{\\\\cup} ax+b$ で更新する。","$\\\\min_{f(x)\\\\in S} f(x_0)$ を返す。","$S = \\\\emptyset$ で初期化する。","最小公倍数。","","$ \\\\sum_{i=0}^{n-1} \\\\left\\\\lfloor\\\\frac{ai+b}{m}\\\\right…","","線形篩。","$n$ の約数を列挙する。","$n$ の約数の個数を返す。","$\\\\phi(n)$ を求める。","$\\\\phi^\\\\star(n)$ を求める。","$n$ を素因数分解する。","$n$ の素因数を列挙する。重複あり。","$n$ が素数であれば <code>true</code> を返す。","$n$ の最小素因数を返す。","$n$ 以下の自然数に対する篩を用意する。","素数を列挙する。","Ackermann 関数。","","位数。","","冪乗。","","tetration。","","","","$n^2+1$ 型素数の篩。","$n^2+1$ を素因数分解する。","$n^2+1$ を素因数を列挙する。重複あり。","$n^2+1$ が素数のとき真を返す。","初期化する。","区分線形凸関数。","$f(x) \\\\xleftarrow{+} |x-a|$ で更新する。","$f(x) \\\\xleftarrow{+} c$ で更新する。","$f(x) \\\\xleftarrow{+} (l-x)_+$ で更新する。","$f(x) \\\\xleftarrow{+} (x-r)_+$ で更新する。","$\\\\argmin_{x\\\\in\\\\mathbb{R}} f(x)$ を返す。","$\\\\min_{x\\\\in\\\\mathbb{R}} f(x)$ を返す。","$g(x) = \\\\min_{y\\\\le x} f(y)$ として、$f\\\\gets g$ …","$g(x) = \\\\min_{y\\\\ge x} f(y)$ として、$f\\\\gets g$ …","$f(x) = 0$ で初期化する。","$g(x) = f(x-a)$ として、$f\\\\gets g$ で更新する。","$[a, b]$ に対して $g(x) = \\\\min_{y\\\\in[x-b, x-a]} f(y)$ …","2-SAT。","$f(x_1, \\\\dots, x_n) \\\\xleftarrow{\\\\wedge} (x_i \\\\vee x_j)$ …","$f(x_1, \\\\dots, x_n) = \\\\top$ で初期化する。","充足可能性を判定し、可能なら解を返す。","KMP 法 (Knuth–Morris–Pratt algorithm)。","接尾辞配列。","Z algorithm。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","KMP 法。","","","","","","接尾辞配列。","","","","","","","","","","","","","Z algorithm。","KMP 法 (Knuth–Morris–Pratt algorithm)。","","","","","","","","","","","","接尾辞配列。","自身を消費し、内部表現を返す。","パターン検索を行う。","パターン文字列検索を行う。","","Z algorithm。","","","","","","","","","","","区間作用を行う。","<code>r</code> で指定される区間に作用を行う。","加法が結合法則を満たすことを示す。","加法が交換法則を満たすことを示す。","可換群 $(R, \\\\circ, 0)$ に対応する型。","値を返す関数を持つ。","結合法則を満たす。","交換法則を満たす。","可換群。","可換モノイド。","可換環。","計数クエリ。","三方向計数クエリ。","…","分配法則を満たす。","","右側が有界である区間。","右側が開である区間。","右側が閉である区間。","右側が非有界である区間。","","","体。","$n$ 番目の出現位置クエリ。","区間和を求める。","左端を固定したときの境界を求める。","右端を固定したときの境界を求める。","","群。","","単位元を持つ。","","","","代入される型。","","マグマ。","最大元を持つ。","最小元を持つ。","モノイド。","作用モノイド。","乗法が結合法則を満たすことを示す。","乗法が交換法則を満たすことを示す。","乗法の逆元を定義する。","モノイド $(R, \\\\ast, 1)$ に対応する型。","乗法の単位元 $1$ を定義する。","作用される型。","作用を行う型。","","","返り値の型。","","","","","逆元を持つ要素が存在する。","","","","","","","$n$ 番目の最小値クエリ。","逆元が常に存在する。","環。","","半群。","集合 $M$ に対応する型。","集合 $R$ に対応する型。","値の代入ができることを示す。","","","","左側が有界である区間。","左側が閉である区間。","左側が非有界である区間。","","加法の単位元 $0$ を定義する。","区間作用に関するトレイトです。","","作用を行う。","作用モノイド。","和 $x \\\\circ y$ を返す。","加法に関するトレイトたちです。","型に紐づく値。","代数的構造に関するトレイトたちです。","計数クエリ。","","$u$ を含む集合の要素数を返す。","","","素集合に関するトレイトです。","","","$u$ と $v$ が同じ集合に含まれていれば <code>true</code> …","","","$n$ 番目の出現位置クエリ。","","区間和に関するトレイトです。","<code>r</code> で指定される区間の和を返す。","区間和の二分探索に関するトレイトたち。","添字 <code>l</code> と述語 <code>pred</code> …","添字 <code>r</code> と述語 <code>pred</code> …","","","","","","単位元を返す。","集合族が空であれば <code>true</code> を返す。","","集合族全体に含まれる要素数 $n$ を返す。","","最大元に関するトレイトです。","最大元を返す。","最小元に関するトレイトです。","最小元を返す。","積 $x \\\\ast y$ を返す。","乗法における $x$ の逆元 $x^{-1}$ を返す。","乗法に関するトレイトたちです。","加法 $\\\\circ$ に関する $x$ の逆元 $-x$ …","集合族を $\\\\{\\\\{0\\\\}, \\\\{1\\\\}, \\\\dots, \\\\{n-1\\\\}\\\\}$ …","","乗法の単位元 $1$ を返す。","乗法 $\\\\ast$ の単位元 $1$ を返す。","$x \\\\circ y$ を返す。","","","","","","","","","","$n$ 番目の最小値クエリ。","","区間に関するトレイトです。","","乗法 $\\\\ast$ における関する $x$ の逆元 …","$u$ を含む集合の代表元を返す。","","","値の代入に関するトレイトです。","<code>i</code> で指定される要素に <code>x</code> を代入する。","","","","","$u$ を含む集合の要素を列挙する。","$u$ を含む集合と $v$ …","加法の単位元 $0$ を返す。","加法 $\\\\circ$ の単位元 $0$ を返す。","区間作用を行う。","<code>r</code> で指定される区間に作用を行う。","","作用モノイド。","作用される型。","作用を行う型。","作用を行う。","加法が結合法則を満たすことを示す。","加法が交換法則を満たすことを示す。","加法の単位元 $0$ を定義する。","加法の単位元 $0$ を返す。","値を返す関数を持つ。","","可換群 $(R, \\\\circ, 0)$ に対応する型。","結合法則を満たす。","交換法則を満たす。","可換群。","可換モノイド。","可換環。","分配法則を満たす。","体。","群。","単位元を持つ。","マグマ。","モノイド。","モノイド $(R, \\\\ast, 1)$ に対応する型。","逆元を持つ要素が存在する。","逆元が常に存在する。","環。","半群。","集合 $M$ に対応する型。","集合 $R$ に対応する型。","和 $x \\\\circ y$ を返す。","単位元を返す。","積 $x \\\\ast y$ を返す。","加法 $\\\\circ$ に関する $x$ の逆元 $-x$ …","乗法 $\\\\ast$ の単位元 $1$ を返す。","$x \\\\circ y$ を返す。","","","乗法 $\\\\ast$ における関する $x$ の逆元 …","加法 $\\\\circ$ の単位元 $0$ を返す。","計数クエリ。","三方向計数クエリ。","","","","","","","","","","","","","","","","","","","","","","","","…","$u$ を含む集合の要素数を返す。","$u$ と $v$ が同じ集合に含まれていれば <code>true</code> …","集合族が空であれば <code>true</code> を返す。","集合族全体に含まれる要素数 $n$ を返す。","集合族を $\\\\{\\\\{0\\\\}, \\\\{1\\\\}, \\\\dots, \\\\{n-1\\\\}\\\\}$ …","$u$ を含む集合の代表元を返す。","$u$ を含む集合の要素を列挙する。","$u$ を含む集合と $v$ …","","","","","","","","","","","","","","","","","","","","$n$ 番目の出現位置クエリ。","","区間和を求める。","","<code>r</code> で指定される区間の和を返す。","左端を固定したときの境界を求める。","右端を固定したときの境界を求める。","添字 <code>l</code> と述語 <code>pred</code> …","添字 <code>r</code> と述語 <code>pred</code> …","","","","最大元を持つ。","最大元を返す。","最小元を持つ。","最小元を返す。","乗法が結合法則を満たすことを示す。","乗法が交換法則を満たすことを示す。","乗法の逆元を定義する。","乗法の単位元 $1$ を定義する。","返り値の型。","乗法における $x$ の逆元 $x^{-1}$ を返す。","乗法の単位元 $1$ を返す。","","","","","","","","","","","","","","","","","","","","$n$ 番目の最小値クエリ。","","右側が有界である区間。","右側が開である区間。","右側が閉である区間。","右側が非有界である区間。","左側が有界である区間。","左側が閉である区間。","左側が非有界である区間。","代入される型。","値の代入ができることを示す。","<code>i</code> で指定される要素に <code>x</code> を代入する。","","","","","","","和を返す演算を持つ。","最大値を返す演算を持つ。","最小値を返す演算を持つ。","積を返す演算を持つ。","…","スキャナ。","","","","","","","","","","","","","区間を配列サイズに収まるように丸める。","配列上の区間に関する関数。","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","加法に関する wrapper クラス。","最大値に関する wrapper クラス。","最小値に関する wrapper クラス。","乗法に関する wrapper クラス。","ローリングハッシュに関する wrapper …","","","","スキャナ。","","","","","","","","","","","","","","","","","","","","","","","","区間を配列サイズに収まるように丸める。","和を返す演算を持つ。","最大値を返す演算を持つ。","最小値を返す演算を持つ。","積を返す演算を持つ。","…","","","","","スキャナ。","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,3,4,5,6,7,8,9,10,11,1,12,2,3,4,5,6,7,8,9,10,11,1,12,4,5,6,9,10,11,1,12,4,5,6,9,10,11,1,12,3,10,11,3,7,8,0,4,5,6,9,6,3,10,4,5,7,8,9,10,2,7,8,1,12,1,12,1,12,0,0,2,2,3,3,4,5,6,7,8,9,10,10,11,1,1,12,12,12,2,12,0,2,3,4,5,6,7,8,9,10,11,1,12,11,4,5,6,9,11,8,7,7,8,8,7,8,7,3,11,0,12,4,5,6,9,10,11,1,12,2,3,4,5,6,7,8,9,10,11,1,12,2,3,4,5,6,7,8,9,10,11,1,12,2,3,4,5,6,7,8,9,10,11,1,12,0,11,0,0,0,0,4,4,4,4,0,5,5,5,5,5,0,0,13,13,6,13,6,13,13,6,13,6,13,6,13,13,13,0,0,7,0,8,0,9,9,9,9,9,9,9,9,0,10,10,0,0,1,1,1,0,12,12,12,0,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,14,15,16,17,14,18,19,20,21,22,23,24,15,16,17,14,18,19,20,21,22,23,24,0,25,14,18,19,20,21,22,23,24,14,18,19,20,21,22,23,24,0,0,0,0,22,24,26,0,26,14,14,0,27,0,28,14,18,19,20,0,29,0,30,30,14,14,18,19,20,21,22,23,24,15,16,17,14,14,14,14,14,14,14,14,14,18,19,20,21,22,23,24,0,31,0,32,0,0,15,16,17,14,18,19,20,21,22,23,24,0,33,0,34,0,0,35,0,36,0,37,0,38,0,14,14,14,14,18,19,20,14,14,0,0,0,14,14,14,18,19,20,21,22,23,24,14,15,16,17,14,18,19,20,21,22,23,24,15,16,17,14,18,19,20,21,22,23,24,0,15,16,17,14,18,19,20,21,22,23,24,14,0,25,0,15,15,15,0,0,18,19,18,19,18,19,0,0,20,20,20,0,26,26,0,27,0,28,0,29,0,30,30,0,31,0,32,0,21,21,21,0,22,22,22,0,33,0,34,0,16,16,16,16,16,16,16,16,16,16,0,35,0,36,0,37,0,38,0,14,0,23,23,23,23,0,24,24,24,24,24,24,24,24,24,24,24,0,17,17,17,0,0,0,39,40,41,39,40,41,39,40,41,39,40,41,39,40,41,39,40,41,39,39,40,40,40,41,41,39,40,41,0,39,40,41,39,39,0,39,40,41,39,40,41,39,40,41,39,40,41,0,0,0,42,42,42,42,42,42,39,42,42,42,0,40,40,40,0,0,43,43,43,43,43,43,41,43,43,43,0,44,0,0,45,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,46,0,47,48,49,50,51,0,0,0,0,0,0,0,0,45,0,52,52,53,54,55,56,57,58,59,0,0,0,0,0,0,0,0,0,0,46,0,60,45,0,0,0,0,0,0,0,0,0,0,44,52,0,45,0,0,0,0,61,62,51,63,0,0,64,62,65,66,0,67,0,53,0,68,69,64,70,0,54,46,71,62,64,62,64,0,72,0,73,45,55,0,45,62,51,74,45,60,75,56,58,57,51,47,49,48,0,0,59,0,76,77,62,64,51,0,50,78,79,64,0,62,62,80,45,0,44,44,0,52,52,52,0,0,0,80,0,70,45,0,0,0,0,0,0,0,0,0,0,0,45,0,0,0,0,60,45,45,71,45,45,45,60,75,76,77,45,0,0,0,81,81,81,81,61,63,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,0,62,62,62,62,62,62,62,62,0,0,0,46,46,0,0,0,64,65,66,64,46,64,64,64,78,79,64,0,67,0,53,53,0,0,68,69,0,54,54,0,72,0,73,0,0,0,0,55,55,74,47,48,49,56,57,58,0,0,0,0,0,0,56,58,57,47,49,48,59,0,59,0,0,0,0,0,0,0,50,0,50,51,0,51,51,51,51,0,0,0,0,0,0,82,83,84,85,86,87,82,83,84,85,86,87,0,0,83,84,85,86,87,83,84,85,86,87,83,84,85,86,87,83,84,85,86,87,82,82,83,84,85,86,87,83,84,85,86,87,82,83,84,85,86,87,83,84,85,86,87,83,84,85,86,87,0,0,0,0,0,83,86,83,0,83,84,85,86,87,82,83,84,85,86,87,82,83,84,85,86,87,82,83,84,85,86,87,0,0,0,0,0,0,87,88,0,0,0,89,89,89,89,89,89,82,82,82,82,82,89,82,82,82,88,89,89,89,89],"f":[null,null,null,null,null,null,null,null,null,null,[[["range",3],["usize",15]],["usize",15]],[[],["usize",15]],[[],["vec",3]],null,[[["range",3],["usize",15]]],null,[[["f64",15],["rangeinclusive",3]]],[[]],null,[[],["option",4]],null,null,[[],["option",4]],[[["fnmut",8]],["option",4]],[[],["option",4]],null,[[["vec",3],["usize",15],["option",4]],["vec",3]],[[],["bool",15]],null,[[["statefulpred",8],["vec",3]],[["vec",3],["usize",15]]],null,null,[[]],null,[[],[["vec",3],["usize",15]]],[[["range",3],["usize",15]],["usize",15]],[[],["usize",15]],[[["range",3],["usize",15]]],[[]],[[["f64",15],["rangeinclusive",3]]],[[],["vec",3]],[[],["option",4]],[[],["option",4]],[[["fnmut",8]],["option",4]],[[],["option",4]],[[["vec",3],["usize",15],["option",4]],["vec",3]],[[["statefulpred",8],["vec",3]],[["vec",3],["usize",15]]],[[],["bool",15]],[[]],[[],[["vec",3],["usize",15]]],null,null,null,null,null,null,null,null,null,null,null,null,[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bicrementalmedian",3]],[[],["bicrementalmediandev",3]],[[],["bitset",3]],[[],["intervalset",3]],[[],["rsdict",3]],[[],["unionfind",3]],[[],["vecactsegtree",3]],[[],["vecsegtree",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[["u64",15]],["usize",15]],[[["usize",15]],["usize",15]],[[],["count3wayresult",3]],[[]],[[]],null,[[["bicrementalmedian",3]],["bool",15]],[[["bicrementalmediandev",3]],["bool",15]],[[["bitset",3]],["bool",15]],[[["intervalset",3]],["bool",15]],[[["intoiterator",8]]],[[["u128",15],["usize",15]],[["usize",15],["option",4]]],[[["usize",15],["u64",15]],[["usize",15],["option",4]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["rangefull",3]]],[[["rangefull",3]]],[[]],[[]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]]],null,null,[[]],[[["vec",3]]],[[["u128",15],["vec",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["bool",15],["vec",3]]],[[]],[[]],[[["vec",3]]],[[]],[[["vec",3]]],[[["usize",15]],[["getmutindex",3],["option",4]]],[[["usize",15]]],[[["usize",15]]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[["bicrementalmedian",3]],["bool",15]],[[["bicrementalmediandev",3]],["bool",15]],[[["bitset",3]],["bool",15]],[[["intervalset",3]],["bool",15]],[[["usize",15]]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],[[]],[[["usize",15]],[["u128",15],["option",4]]],[[["usize",15]],["usize",15]],null,[[["usize",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,[[["usize",15]],["bool",15]],null,null,null,null,[[]],[[],["option",4]],[[]],[[],["bool",15]],null,[[]],[[],["option",4]],[[]],[[]],[[],["bool",15]],null,null,[[]],[[]],[[["usize",15]],["bool",15]],[[]],[[["usize",15]]],[[]],[[]],[[],["iter",3]],[[["bitset",3]]],[[]],[[],["option",4]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,[[]],null,[[]],null,[[]],[[],["option",4]],[[],["bool",15]],[[["rangebounds",8]]],[[],["bool",15]],[[],["bound",4]],[[]],[[["rangebounds",8]]],null,[[["usize",15],["u64",15]],["usize",15]],[[["usize",15],["u64",15]],[["usize",15],["option",4]]],null,null,[[],["bool",15]],[[],["usize",15]],[[["usize",15]]],null,[[],["bool",15]],[[],["usize",15]],[[["usize",15]]],null,[[["u128",15],["usize",15]],["usize",15]],[[["u128",15],["usize",15]],[["usize",15],["option",4]]],[[["u128",15],["usize",15]],[["u128",15],["option",4]]],[[["usize",15]],[["vec",3],["option",4]]],null,[[["usize",15]]],null,[[["usize",15]],[["vec",3],["usize",15]]],null,[[["usize",15]],[["vec",3],["option",4]]],[[["usize",15]]],[[["usize",15]],[["vec",3],["usize",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[],["modint",3]],[[],["constdiv2",3]],[[],["constdiv",3]],[[],["crt",3]],[[],["harmonicfloorsum",3]],[[],["incrementallineset",3]],[[],["sievesquareplusone",3]],[[],["slopefunction",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,[[],["incrementallineset",3]],[[],["slopefunction",3]],[[["u32",15]]],null,[[]],[[]],[[]],null,[[],[["intoiter",3],["chain",3],["rev",3]]],null,[[],["option",4]],[[["modint",3]],["bool",15]],[[["constdiv2",3]],["bool",15]],[[["constdiv",3]],["bool",15]],[[["crt",3]],["bool",15]],null,[[]],null,[[],["intoiter",3]],[[],["intoiter",3]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["u32",15]]],[[["i16",15]]],[[["i32",15]]],[[["i64",15]]],[[["u8",15]]],[[["u16",15]]],[[["i8",15]]],[[["u64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],null,[[]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],null,[[]],null,null,[[]],null,[[],["option",4]],null,[[]],null,[[]],null,[[]],[[]],[[]],[[["modint",3]],["bool",15]],[[["constdiv2",3]],["bool",15]],[[["constdiv",3]],["bool",15]],[[["crt",3]],["bool",15]],[[]],[[]],[[["usize",15]],["usize",15]],null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,[[]],null,[[["usize",15]],["bool",15]],[[["usize",15]]],[[]],null,null,[[["u64",15]]],[[["u64",15]]],[[["u64",15]],["u64",15]],[[["u64",15]],["u64",15]],[[["u64",15]],["u64",15]],[[["u64",15]],["u64",15]],[[["usize",15]],["usize",15]],null,[[["u64",15]]],[[]],[[],["option",4]],null,[[["u32",15]]],[[]],null,[[],[["intoiter",3],["chain",3],["rev",3]]],null,[[],["option",4]],null,[[]],null,[[],["intoiter",3]],[[],["intoiter",3]],null,[[]],null,[[]],null,[[["usize",15]]],[[],["usize",15]],[[],["usize",15]],null,[[["i128",15]]],[[["i128",15]],[["i128",15],["option",4]]],[[]],null,[[]],null,[[]],null,[[["usize",15]]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]],["usize",15]],[[["usize",15]]],[[["usize",15]]],[[["usize",15]],["bool",15]],[[["usize",15]],[["usize",15],["option",4]]],[[["usize",15]]],[[]],null,[[]],null,[[],["option",4]],null,[[]],null,[[]],null,[[],["i64",15]],null,[[["usize",15]]],[[["usize",15]]],[[["usize",15]],["bool",15]],[[["usize",15]]],null,[[["i128",15]]],[[["i128",15]]],[[["i128",15]]],[[["i128",15]]],[[]],[[],["i128",15]],[[]],[[]],[[]],[[["i128",15]]],[[["rangeinclusive",3],["i128",15]]],null,[[["isize",15]]],[[["usize",15]]],[[],[["vec",3],["option",4]]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["kmpsearcher",3]],[[],["suffixarray",3]],[[],["zsearcher",3]],[[]],[[]],[[]],[[["kmpsearcher",3]],["bool",15]],[[["suffixarray",3]],["bool",15]],[[["zsearcher",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[["vec",3]]],[[["string",3]]],[[["vec",3]]],[[]],[[]],[[["vec",3]]],[[]],[[]],[[]],null,[[["kmpsearcher",3]],["bool",15]],[[["suffixarray",3]],["bool",15]],[[["zsearcher",3]],["bool",15]],[[],[["usize",15],["option",4]]],[[]],null,[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["occurrences",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[],[["vec",3],["usize",15]]],[[]],[[["str",15]]],null,null,[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["occurrences",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],null,[[]],null,null,null,null,[[],["usize",15]],[[["usize",15]],["usize",15]],[[],["usize",15]],[[],["count3wayresult",3]],null,null,[[],["usize",15]],[[["usize",15]],["bool",15]],[[]],[[]],null,[[["usize",15]],[["usize",15],["option",4]]],null,[[]],null,[[["usize",15]]],[[["usize",15]]],[[],["usize",15]],[[]],null,[[["usize",15]],["option",4]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[],["usize",15]],null,[[]],null,[[]],[[]],[[]],null,[[]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["bool",15]],[[]],[[]],[[]],null,null,[[["usize",15]],["option",4]],null,[[]],[[]],[[["usize",15]],["usize",15]],[[]],[[]],null,[[]],[[]],[[]],[[],["usize",15]],null,[[["usize",15]],[["vec",3],["usize",15]]],[[["usize",15]],["bool",15]],[[]],[[]],null,null,[[]],null,null,null,[[]],null,null,null,[[]],null,[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[],["count3wayresult",3]],[[]],[[],["usize",15]],[[],["count3wayresult",3]],[[],["usize",15]],[[["count3wayresult",3]],["bool",15]],[[["formatter",3]],["result",6]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[],["usize",15]],[[],["usize",15]],[[["count3wayresult",3]],["bool",15]],[[],["usize",15]],[[["usize",15]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],null,[[["usize",15]],["usize",15]],[[["usize",15]],["bool",15]],[[],["bool",15]],[[],["usize",15]],[[["usize",15]]],[[["usize",15]],["usize",15]],[[["usize",15]],[["vec",3],["usize",15]]],[[["usize",15]],["bool",15]],null,null,null,null,null,null,null,null,[[],["usize",15]],[[]],[[]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["usize",15]],[[]],[[]],[[]],[[],["usize",15]],null,[[["usize",15]],[["usize",15],["option",4]]],null,null,[[]],null,null,[[["usize",15]]],[[["usize",15]]],null,null,[[["usize",15]],["option",4]],null,[[]],null,[[]],null,null,null,null,null,[[]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,[[],["option",4]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[]],null,null,[[["usize",15]],["option",4]],null,null,null,null,null,null,null,null,null,[[]],null,null,[[],["usize",15]],[[]],[[],["bool",15]],[[]],null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["rangebounds",8],["usize",15]],[["range",3],["usize",15]]],null,[[],["opadd",3]],[[],["opmax",3]],[[],["opmin",3]],[[],["opmul",3]],[[],["oprollhash",3]],[[]],[[]],[[]],[[]],[[]],[[["opadd",3]],["bool",15]],[[["opmax",3]],["bool",15]],[[["opmin",3]],["bool",15]],[[["opmul",3]],["bool",15]],[[["oprollhash",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["string",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["opadd",3]],["bool",15]],[[["opmax",3]],["bool",15]],[[["opmin",3]],["bool",15]],[[["opmul",3]],["bool",15]],[[["oprollhash",3]],["bool",15]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,[[],["option",4]],[[],["option",4]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["rangebounds",8],["usize",15]],[["range",3],["usize",15]]],null,null,null,null,null,[[["str",15]]],null,null,null,null,[[]],[[]],[[["scantupleerror",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[],[["result",4],["error",3]]],[[],["str",15]],[[],["str",15]],[[]],[[]],[[]],[[],[["result",4],["scan",8]]],[[],["result",4]],[[["usize",15]],[["result",4],["vec",3]]],[[["str",15]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]]],"p":[[3,"VecActSegtree"],[3,"DisjointSparseTable"],[3,"WaveletMatrix"],[3,"BicrementalMedian"],[3,"BicrementalMedianDev"],[3,"BitSet"],[3,"FoldableDeque"],[3,"FoldableQueue"],[3,"IntervalSet"],[3,"RsDict"],[3,"UnionFind"],[3,"VecSegtree"],[3,"Iter"],[3,"ModInt"],[3,"CompactSieve"],[3,"LinearSieve"],[3,"TwoSat"],[3,"ConstDiv2"],[3,"ConstDiv"],[3,"Crt"],[3,"HarmonicFloorSum"],[3,"IncrementalLineSet"],[3,"SieveSquarePlusOne"],[3,"SlopeFunction"],[8,"CarmichaelLambda"],[8,"DigitSum"],[8,"Divisors"],[8,"DLog"],[8,"EulerPhi"],[8,"Factors"],[8,"Gcd"],[8,"GcdRecip"],[8,"Lcm"],[8,"LinearFloorSum"],[8,"ModAckermann"],[8,"ModOrd"],[8,"ModPow"],[8,"ModTetration"],[3,"KmpSearcher"],[3,"SuffixArray"],[3,"ZSearcher"],[3,"Occurrences"],[3,"Occurrences"],[8,"Act"],[8,"Ring"],[8,"SliceHash"],[8,"Push"],[8,"PushFront"],[8,"PushBack"],[8,"SetValue"],[8,"StatefulPred"],[8,"MonoidAction"],[8,"Fold"],[8,"GetMut"],[8,"MulRecip"],[8,"Pop"],[8,"PopFront"],[8,"PopBack"],[8,"Quantile"],[8,"Magma"],[8,"Count"],[8,"DisjointSet"],[8,"Count3way"],[8,"ElasticSlice"],[8,"ExpandBack"],[8,"ExpandFront"],[8,"FindNth"],[8,"FoldBisect"],[8,"FoldBisectRev"],[8,"AssocVal"],[8,"Identity"],[8,"Max"],[8,"Min"],[8,"One"],[8,"PartialRecip"],[8,"Recip"],[8,"Field"],[8,"ShrinkBack"],[8,"ShrinkFront"],[8,"Zero"],[3,"Count3wayResult"],[3,"Scanner"],[3,"OpAdd"],[3,"OpMax"],[3,"OpMin"],[3,"OpMul"],[3,"OpRollHash"],[8,"Scan"],[3,"ScanTupleError"]]},\
"nekolib_verify":{"doc":"<code>nekolib</code> の verify に関するもの。","t":[],"n":[],"q":[],"d":[],"i":[],"f":[],"p":[]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};