(function() {var implementors = {};
implementors["nekolib"] = [{"text":"impl&lt;T:&nbsp;Clone + Ord&gt; Clone for IntervalSet&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;M:&nbsp;Clone&gt; Clone for VecSegtree&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Monoid,<br>&nbsp;&nbsp;&nbsp;&nbsp;M::Set: Clone,<br>&nbsp;&nbsp;&nbsp;&nbsp;M::Set: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;M:&nbsp;Clone + AssocVal&lt;i64&gt;&gt; Clone for ModInt&lt;M&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone + Ord&gt; Clone for SuffixArray&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for OpAdd&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for OpMax&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for OpMin&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone&gt; Clone for OpMul&lt;T&gt;","synthetic":false,"types":[]},{"text":"impl&lt;T:&nbsp;Clone, B:&nbsp;Clone&gt; Clone for OpRollHash&lt;T, B&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Copy + Eq,<br>&nbsp;&nbsp;&nbsp;&nbsp;B: AssocVal&lt;T&gt;,&nbsp;</span>","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()