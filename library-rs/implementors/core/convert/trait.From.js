(function() {var implementors = {};
implementors["nekolib"] = [{"text":"impl&lt;M&gt; From&lt;Vec&lt;&lt;M as Magma&gt;::Set&gt;&gt; for VecSegtree&lt;M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Monoid,<br>&nbsp;&nbsp;&nbsp;&nbsp;M::Set: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;M&gt; From&lt;VecSegtree&lt;M&gt;&gt; for Vec&lt;M::Set&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;M: Monoid,<br>&nbsp;&nbsp;&nbsp;&nbsp;M::Set: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;M:&nbsp;AssocVal&lt;i64&gt;&gt; From&lt;i8&gt; for ModInt&lt;M&gt;","synthetic":false,"types":[]},{"text":"impl&lt;M:&nbsp;AssocVal&lt;i64&gt;&gt; From&lt;i16&gt; for ModInt&lt;M&gt;","synthetic":false,"types":[]},{"text":"impl&lt;M:&nbsp;AssocVal&lt;i64&gt;&gt; From&lt;i32&gt; for ModInt&lt;M&gt;","synthetic":false,"types":[]},{"text":"impl&lt;M:&nbsp;AssocVal&lt;i64&gt;&gt; From&lt;i64&gt; for ModInt&lt;M&gt;","synthetic":false,"types":[]},{"text":"impl&lt;M:&nbsp;AssocVal&lt;i64&gt;&gt; From&lt;u8&gt; for ModInt&lt;M&gt;","synthetic":false,"types":[]},{"text":"impl&lt;M:&nbsp;AssocVal&lt;i64&gt;&gt; From&lt;u16&gt; for ModInt&lt;M&gt;","synthetic":false,"types":[]},{"text":"impl&lt;M:&nbsp;AssocVal&lt;i64&gt;&gt; From&lt;u32&gt; for ModInt&lt;M&gt;","synthetic":false,"types":[]},{"text":"impl&lt;M:&nbsp;AssocVal&lt;i64&gt;&gt; From&lt;u64&gt; for ModInt&lt;M&gt;","synthetic":false,"types":[]},{"text":"impl From&lt;String&gt; for Parser","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()